# -------------------------------------------
# Navigation

development_path='~/Development'

alias ds="cd $development_path/@jrh/system"
alias dv="cd $development_path"
alias mx="tmux"
alias p="tmuxinator"
alias rlc="cd $development_path/@rlc"
alias rlcw="cd $development_path/@rlc/website"

# --------------------------------------------
# Rails

alias be="bundle exec"

# --------------------------------------------
# Search History

bindkey '^R' history-incremental-search-backward

# --------------------------------------------
# Shell

alias ll='ls -al'
alias re='source ~/.zshrc'

# --------------------------------------------
# Utilities

# Use nvm.
export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"

# Use pyenv.
eval "$(pyenv init - zsh)"

# Use rbenv.
eval "$(rbenv init - zsh)"

# Use ripgrep for searching.
export FZF_DEFAULT_COMMAND='rg --hidden --files'

# Use starship.
eval "$(starship init zsh)"

# Use vim as default editor.
export EDITOR='vim'

# --------------------------------------------
# Utilities: Takeout

alias ta="takeout start --all"
alias takeout="docker run --rm -v /var/run/docker.sock:/var/run/docker.sock --add-host=host.docker.internal:host-gateway -it tighten/takeout:latest"

# --------------------------------------------
# Git

# Use `g` as a shortcut for `git`.
# With no arguments, do `git status`.
function g {
  if [[ $# > 0 ]]; then
    git "$@"
  else
    git status
  fi
}

# Check out a branch if there is one,
# otherwise check out files.
gc(){
  if [[ $# == 0 ]]; then
    local branch=$(select-git-branch)

    if [[ -n "$branch" ]]; then
      git checkout "$branch"
    fi

    true
  else
    git checkout "$@"
  fi
}

# Check out a Git branch.
function gb(){
  if [[ -z "$1" ]]; then
    echo "Provide a branch name." >&2
    return 1
  fi

  local branch="$1"
  local base=$2

  if [[ -n "$base" ]]; then
    git checkout -b "$branch" "$base"
  else
    git checkout -b "$branch"
  fi
}

# Shortcut to set the current branch to track
# its corresponding branch on `origin`.
function gt(){
  local currentBranch=$(git rev-parse --abbrev-ref HEAD)
  git branch --set-upstream-to="origin/$currentBranch" "$currentBranch"
}

# Amend with the previous commit message.
alias gam='g commit --amend -Chead'

# Simple aliases.
alias ga='g add'
alias gcm='g commit -m '
alias gcp='g cherry-pick '
alias gd='g diff -- . ":!*package-lock.json"'
alias gdc='g diff --cached -- . ":!*package-lock.json"'
alias gl="g log --pretty='%C(magenta)%h%C(cyan)%d %C(white)%s'"
alias gp="g push"
alias gpl="g pull"

# Configure repositories for specific GitHub accounts.
# https://www.fabian-keller.de/blog/configuring-a-different-ssh-key-per-git-repository/
alias @jrh='git config user.email "joshua.reade.harris@gmail.com" && git config user.name "Joshua Reade Harris" && git config core.sshCommand "ssh -F ~/.ssh/config.github.jrh"'
alias @rlc='git config user.email "joshua@rescuingleftovercuisine.org" && git config user.name "Joshua Reade Harris" && git config core.sshCommand "ssh -F ~/.ssh/config.github.rlc-jrh"'

# --------------------------------------------
# Git: RLC

alias gs='rlc__stage_latest_commit'

rlc__stage_latest_commit() {
  # Store the current branch name
  local original_branch=$(git branch --show-current)

  local latest_commit_id=$(git rev-parse HEAD)
  local latest_commit_message=$(git log -1 --pretty=format:"%s" "$latest_commit_id")
  echo "üìù Staging commit: '$latest_commit_message' from branch '$original_branch'."

  echo "üîÑ Switching to branch 'staging'..."
  if ! git checkout staging; then
    echo "üîÑ Error: Failed to switch to branch 'staging'."
    return 1
  fi

  echo "‚¨áÔ∏è  Pulling latest changes on branch 'staging'..."
  if ! git pull; then
    echo "‚¨áÔ∏è Error: Failed to pull from branch 'staging'."
    git checkout "$original_branch"
    return 1
  fi

  # Cherry pick the stored commit
  echo "üçí Cherry-picking commit '$latest_commit_id'..."
  if ! git cherry-pick "$latest_commit_id"; then
    echo "üçí Error: Failed to cherry-pick commit '$latest_commit_id'."
    git checkout "$original_branch"
    return 1
  fi

  echo "‚¨ÜÔ∏è  Pushing branch 'staging'..."
  if ! git push; then
    echo "‚¨ÜÔ∏è Error: Failed to push branch 'staging'."
    git checkout "$original_branch"
    return 1
  fi

  echo "‚Ü©Ô∏è Switching back to '$original_branch'..."
  if ! git checkout "$original_branch"; then
    echo "‚Ü©Ô∏è Error: Failed to switch back to original branch '$original_branch'."
    return 1
  fi

  echo "‚úÖ Successfully staged $latest_commit_message."
}

# --------------------------------------------
# Automatically switch to Node version from
# .nvmrc.

autoload -U add-zsh-hook

load-nvmrc() {
  local nvmrc_path
  nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version
    nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    echo "[nvm] Reverting to default version."
    nvm use default
  fi
}

add-zsh-hook chpwd load-nvmrc
load-nvmrc
